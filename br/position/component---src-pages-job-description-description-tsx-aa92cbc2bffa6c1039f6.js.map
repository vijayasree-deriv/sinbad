{"version":3,"file":"component---src-pages-job-description-description-tsx-aa92cbc2bffa6c1039f6.js","mappings":"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","sources":["webpack://sinbad-dev/./src/pages/job-description/description.tsx"],"sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { JobTitleProps } from './data'\nimport { ContainerWrapper, Flex, Header } from 'components/containers'\nimport { Challenges, Team, Requirements, GoodToHave, Arrow } from 'images/common/jd'\n\nconst DescriptionContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n`\n\nconst DescriptionContainerWrapper = styled(ContainerWrapper)`\n    padding: 50px 0;\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n`\n\nconst StyledHeader = styled(Header)`\n    text-transform: uppercase;\n    color: var(--color-sand-4);\n    font-size: 3.8rem;\n    line-height: 50px;\n    font-weight: 560;\n    font-family: ${(props) => props.font_family || 'Maven Pro Bold'};\n`\n\nconst HeaderImageContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n    padding-top: 30px;\n`\n\nconst JDContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding-bottom: 60px;\n`\n\nconst Card = styled(Flex)`\n    display: flex;\n    flex-direction: column;\n    max-width: 1190px;\n    min-height: 243px;\n    margin: 20px 0;\n    box-shadow: rgba(14, 14, 14, 0.1) 0 4px 8px 0;\n    background-color: var(--color-white);\n    border-radius: 4px;\n    justify-content: center;\n    padding: 50px 0;\n`\n\nconst StyledImg = styled.img`\n    padding-right: 50px;\n    align-items: flex-end;\n`\n\nconst ArrowImage = styled.img<{ margin?: string }>`\n    width: 23px;\n    height: 23px;\n    margin-top: 3px;\n`\n\nconst StyledList = styled.ul`\n    display: flex;\n    flex-direction: column;\n    flex-wrap: wrap;\n    align-items: flex-start;\n    padding: 50px 0 50px 75px;\n`\nconst StyledListItem = styled.li<{ pb?: string }>`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    align-content: center;\n    color: var(--color-black-3);\n    padding-left: 5px;\n    max-width: 850px;\n    padding-bottom: ${(props) => props.pb || 'unset'};\n`\n\nconst StyledText = styled.div<{ font_family?: string; padding?: string }>`\n    font-size: 1.9rem;\n    line-height: 33px;\n    color: var(--color-black-2);\n    font-weight: 320;\n    text-align: left;\n    font-family: ${(props) => props.font_family || 'Poppins'};\n    padding: ${(props) => props.padding || 'unset'};\n    display: flex;\n    align-items: center;\n    padding-left: 10px;\n`\n\nconst Description = ({ position }: JobTitleProps) => {\n    return (\n        <DescriptionContainer>\n            <DescriptionContainerWrapper>\n                <JDContainer>\n                    <Card ai=\"center\">\n                        {position?.description.map((paragraph, index) => {\n                            return (\n                                <StyledText padding=\"15px 75px\" key={index}>\n                                    {paragraph}\n                                </StyledText>\n                            )\n                        })}\n                    </Card>\n\n                    <Card direction=\"column\">\n                        <HeaderImageContainer>\n                            <StyledHeader>Your challenges</StyledHeader>\n                            <StyledImg src={Challenges} />\n                        </HeaderImageContainer>\n                        <StyledList>\n                            {position?.challenges.map((challenge, index) => {\n                                return (\n                                    <StyledListItem key={index}>\n                                        <ArrowImage src={Arrow} />\n                                        <StyledText>{challenge}</StyledText>\n                                    </StyledListItem>\n                                )\n                            })}\n                        </StyledList>\n                    </Card>\n                    <Card direction=\"column\">\n                        <HeaderImageContainer>\n                            <StyledHeader>Our Team</StyledHeader>\n                            <StyledImg src={Team} />\n                        </HeaderImageContainer>\n                        <StyledText padding=\"15px 75px 50px\">{position?.team}</StyledText>\n                    </Card>\n                    <Card direction=\"column\">\n                        <HeaderImageContainer>\n                            <StyledHeader>Requirements</StyledHeader>\n                            <StyledImg src={Requirements} />\n                        </HeaderImageContainer>\n                        <StyledList>\n                            {position?.requirements.map((requirement, index) => {\n                                return (\n                                    <StyledListItem key={index}>\n                                        <ArrowImage src={Arrow} />\n                                        <StyledText>{requirement}</StyledText>\n                                    </StyledListItem>\n                                )\n                            })}\n                        </StyledList>\n                    </Card>\n                    {position?.good_to_have.length > 1 ? (\n                        <Card direction=\"column\">\n                            <HeaderImageContainer>\n                                <StyledHeader>Whatâ€™s good to have</StyledHeader>\n                                <StyledImg src={GoodToHave} />\n                            </HeaderImageContainer>\n                            <StyledList>\n                                {position?.good_to_have.map((ability, index) => {\n                                    return (\n                                        <StyledListItem key={index}>\n                                            <ArrowImage src={Arrow} />\n                                            <StyledText>{ability}</StyledText>\n                                        </StyledListItem>\n                                    )\n                                })}\n                            </StyledList>\n                        </Card>\n                    ) : null}\n                </JDContainer>\n            </DescriptionContainerWrapper>\n        </DescriptionContainer>\n    )\n}\n\nexport default Description\n"],"names":["DescriptionContainer","styled","DescriptionContainerWrapper","ContainerWrapper","withConfig","StyledHeader","Header","props","font_family","HeaderImageContainer","JDContainer","Card","Flex","StyledImg","ArrowImage","StyledList","StyledListItem","pb","StyledText","padding","position","React","ai","description","map","paragraph","index","key","direction","src","Challenges","challenges","challenge","Arrow","Team","team","Requirements","requirements","requirement","good_to_have","length","GoodToHave","ability"],"sourceRoot":""}